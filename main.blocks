<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="w}KF;/I.-w+UQx!4}YEO" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="Uj86f4rg-2+1EgfzC_U#"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace SCD40 {" line1="" line2="    export enum SCD40_T_UNIT {" line3="        //% block=&quot;°C&quot;" line4="        C = 0," line5="        //% block=&quot;°F&quot;" line6="        F = 1" line7="    }" line8="" line9="    const SCD40_I2C_ADDR = 0x62;" line10="" line11="    let co2 = 0;" line12="    let temperature = 0;" line13="    let temperatureF = 0;" line14="    let relative_humidity = 0;" line15="    let CTH = [0, 0, 0];" line16="" line17="    init();" line18="" line19="    function read_word(repeat = false) {" line20="        let value = pins.i2cReadNumber(SCD40_I2C_ADDR, NumberFormat.UInt16BE, repeat);" line21="        pins.i2cReadNumber(SCD40_I2C_ADDR, NumberFormat.UInt8BE, repeat);" line22="        return value;" line23="    }" line24="" line25="    function read_words(number_of_words: number) {" line26="        let buffer = pins.i2cReadBuffer(SCD40_I2C_ADDR, number_of_words * 3, false);" line27="        let words: number[] = [];" line28="        for (let i = 0; i &lt; number_of_words; i++) {" line29="            words.push(buffer.getNumber(NumberFormat.UInt16BE, 3 * i));" line30="        }" line31="        return words;" line32="    }" line33="" line34="    function get_data_ready_status() {" line35="        pins.i2cWriteNumber(SCD40_I2C_ADDR, 0xE4B8, NumberFormat.UInt16BE);" line36="        basic.pause(1);" line37="        let data_ready = read_word() &amp; 0x07FF;" line38="        return data_ready &gt; 0;" line39="    }" line40="" line41="    function read_measurement() {" line42="        // only read measurement if data is available, else use last measurement" line43="        if (!get_data_ready_status()) {" line44="            return" line45="        }" line46="        pins.i2cWriteNumber(SCD40_I2C_ADDR, 0xEC05, NumberFormat.UInt16BE);" line47="        basic.pause(1);" line48="        let values = read_words(6);" line49="        co2 = values[0];" line50="        let adc_t = values[1];" line51="        let adc_rh = values[2];" line52="        temperature = -45 + (175 * adc_t / (1 &lt;&lt; 16));" line53="        temperature = (Math.round(temperature * 10) / 10)" line54="        temperatureF = 32 + ((temperature * 9) / 5);" line55="        relative_humidity = 100 * adc_rh / (1 &lt;&lt; 16);" line56="        relative_humidity = (Math.round(relative_humidity * 10) / 10)" line57="    }" line58="" line59="    /**" line60="     * perform a factory reset" line61="     */" line62="    //% blockId=&quot;SCD40_PERFORM_FACTORY_RESET&quot; block=&quot;factory reset&quot;" line63="    //% block.loc.de=&quot;auf Werkseinstellung setzen&quot;    " line64="    //% weight=60 blockGap=8 advanced=true" line65="    export function perform_factory_reset() {" line66="        pins.i2cWriteNumber(SCD40_I2C_ADDR, 0x3632, NumberFormat.UInt16BE);" line67="    }" line68="" line69="    export function init() {" line70="        start_continuous_measurement();" line71="    }" line72="" line73="    /**" line74="     * start continuous measurement. Call this before reading measurements" line75="     */" line76="    //% blockId=&quot;SCD40_START_CONTINUOUS_MEASUREMENT&quot; block=&quot;start continuous measurement&quot;" line77="    //% block.loc.de=&quot;starte dauerhafte Messung&quot;" line78="    //% weight=70 blockGap=8 advanced=true" line79="    export function start_continuous_measurement() {" line80="        pins.i2cWriteNumber(SCD40_I2C_ADDR, 0x21b1, NumberFormat.UInt16BE);" line81="    }" line82="" line83="    /**" line84="     * stop continuous measurement. Call this to stop SCD40 internal measurements" line85="     */" line86="    //% blockId=&quot;SCD40_STOP_CONTINUOUS_MEASUREMENT&quot; block=&quot;stop continuous measurement&quot;" line87="    //% block.loc.de=&quot;stoppe dauerhafte Messung&quot;" line88="    //% weight=70 blockGap=8 advanced=true" line89="    export function stop_continuous_measurement() {" line90="        pins.i2cWriteNumber(SCD40_I2C_ADDR, 0x3F86, NumberFormat.UInt16BE);" line91="        basic.pause(500);" line92="    }" line93="" line94="    /**" line95="     * get CO2. Call this at most once every 5 seconds, else last measurement value will be returned" line96="     */" line97="    //% blockId=&quot;SCD40_GET_CO2&quot; block=&quot;CO2 (ppm)&quot;" line98="    //% block.loc.de=&quot;CO2 (ppm)&quot;" line99="    //% weight=80 blockGap=8" line100="    export function get_co2() {" line101="        read_measurement();" line102="        return co2;" line103="    }" line104="" line105="    /**" line106="     * get temperature. Call this at most once every 5 seconds, else last measurement value will be returned" line107="     */" line108="    //% blockId=&quot;SCD40_GET_TEMPERATURE&quot; block=&quot;temperature $units [°C or°F]&quot;" line109="    //% block.loc.de=&quot;Temperatur $units [°C or °F]&quot;" line110="    //% weight=80 blockGap=8" line111="    export function get_temperature(unit: SCD40_T_UNIT = SCD40_T_UNIT.C) {" line112="        read_measurement();" line113="        return (unit == SCD40_T_UNIT.C) ? temperature : temperatureF;" line114="    }" line115="" line116="    /**" line117="     * get relative humidity. Call this at most once every 5 seconds, else last measurement value will be returned" line118="     */" line119="    //% blockId=&quot;SCD40_GET_RELATIVE_HUMIDITY&quot; block=&quot;relative humidity&quot;" line120="    //% block.loc.de=&quot;relative Luftfeuchtigkeit&quot;" line121="    //% weight=80 blockGap=8" line122="    export function get_relative_humidity() {" line123="        read_measurement();" line124="        return relative_humidity;" line125="    }" line126="" line127="    /**" line128="     * get CO2, temperature and relative humidity at once. Call this at most once every 5 seconds, else last measurement value will be returned" line129="    */" line130="    //% blockId=&quot;SCD40_GET_ALL_READINGS&quot;" line131="    //% block=&quot;all reading&quot;" line132="    //% block.loc.de=&quot;CO2, Temperatur und Luftfeuchtigkeit|input °C or °F&quot;" line133="    //% weight=80 blockGap=8" line134="    export function get_all_readings(unit: SCD40_T_UNIT = SCD40_T_UNIT.C) : number[] {" line135="        read_measurement();" line136="        let _temperature = (unit == SCD40_T_UNIT.C ? temperature : temperatureF);" line137="        return [co2, _temperature, relative_humidity];" line138="    }" line139="}" numlines="140"></mutation></block></statement></block></xml>